# coding: utf-8

"""
    RE: Swynca

    B4CKSP4CE member/money management system

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.git_hub_metadata_dto import GitHubMetadataDTO
from openapi_client.models.telegram_metadata_dto import TelegramMetadataDTO
from typing import Optional, Set
from typing_extensions import Self

class MemberDTO(BaseModel):
    """
    MemberDTO
    """ # noqa: E501
    id: StrictStr
    name: StrictStr
    email: StrictStr
    username: StrictStr
    status: StrictStr
    balance: StrictStr
    joined_at: datetime = Field(alias="joinedAt")
    telegram_metadata: Optional[TelegramMetadataDTO] = Field(default=None, alias="telegramMetadata")
    github_metadata: Optional[GitHubMetadataDTO] = Field(default=None, alias="githubMetadata")
    __properties: ClassVar[List[str]] = ["id", "name", "email", "username", "status", "balance", "joinedAt", "telegramMetadata", "githubMetadata"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['active', 'frozen']):
            raise ValueError("must be one of enum values ('active', 'frozen')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MemberDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of telegram_metadata
        if self.telegram_metadata:
            _dict['telegramMetadata'] = self.telegram_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of github_metadata
        if self.github_metadata:
            _dict['githubMetadata'] = self.github_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MemberDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "email": obj.get("email"),
            "username": obj.get("username"),
            "status": obj.get("status"),
            "balance": obj.get("balance"),
            "joinedAt": obj.get("joinedAt"),
            "telegramMetadata": TelegramMetadataDTO.from_dict(obj["telegramMetadata"]) if obj.get("telegramMetadata") is not None else None,
            "githubMetadata": GitHubMetadataDTO.from_dict(obj["githubMetadata"]) if obj.get("githubMetadata") is not None else None
        })
        return _obj


